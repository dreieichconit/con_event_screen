@using PageModel = Screen.Data.Models.Page;
@using Screen.Services.Interfaces.Data
@using Screen.Data.Enum
@using Microsoft.Extensions.Logging
@using Screen.Services.Interfaces.Display
@using Serilog
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject ICurrentConfigurationService ConfigService
@inject NavigationManager NavManager

<MudStack Style="overflow: hidden" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="h-100">
    @switch (PageQueue.CurrentPage?.PageType)
    {
        case PageType.Games:
            <GamePage Page="@PageQueue.CurrentPage" Pagination="@PageQueue.CurrentPagination" @ref="_current"/>
            break;
            
        default:
            <TextPage Text="There are no pages..."/>
            break;
    }
</MudStack>

@code {
    
    [Inject(Key = "games")]
    private IPageQueueService PageQueue { get; set; }

    private PageModelPage _current = null!;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        PageQueue.UpdateUi += (_, _) =>
        {
            InvokeAsync(StateHasChanged);
            _current.Update();
        };
       
    }

    
}