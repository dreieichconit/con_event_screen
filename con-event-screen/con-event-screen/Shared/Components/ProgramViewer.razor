@using con_event_services.Interfaces
@using con_event_api
@using con_event_api.Classes
@using Serilog
@using System.Web
@inherits LayoutComponentBase
@inject IStateController Controller
@inject IContentController Content

@if (Visible)
{
    <div class="program-wrapper gap-4">
        <MudTimeline TimelineOrientation="TimelineOrientation.Horizontal" Style="width: 100%; height: 100%" Class="ma-2">
            @foreach (var item in Content.ProgramItems)
            {
                <MudTimelineItem Color="Current(item)" Size="CurrentSize(item)">
                    <ItemContent>
                        <MudText Align="Align.Center" Typo="Typo.h3">@item.TitleDe</MudText>
                    </ItemContent>
                    <ItemOpposite>
                        <div class="d-flex flex-column">
                            <MudText Align="Align.Center" Typo="Typo.h2" Color="Current(item)">@item.FormattedTimeStamp</MudText>
                            <MudText Align="Align.Center" Typo="Typo.h4" Color="Current(item)">@item.location_group_de</MudText>
                        </div>
                    </ItemOpposite>
                </MudTimelineItem>
            }
        </MudTimeline>
    </div>
}



@code {

    protected Color Current(ProgramItem item)
    {
        return item.IsActive ? Color.Success : Color.Default;
    }

    protected Size CurrentSize(ProgramItem item)
    {
        return item.IsActive ? Size.Large : Size.Medium;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await ReloadContent(Order - 1, EventArgs.Empty);
        Controller.ContentChanged += async(e, ee) => await ReloadContent(e, ee);
    }
    
    private async Task ReloadContent(object? e, EventArgs ee)
    {
        if (e is int order)
        {
            if (order == Order - 1)
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }
    
    [Parameter]
    public int Order { get; set; }
    
    [Parameter]
    public bool Visible { get; set; }
}