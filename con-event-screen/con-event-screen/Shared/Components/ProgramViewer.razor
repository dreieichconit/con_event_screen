@using con_event_services.Interfaces
@using con_event_api
@using con_event_api.Classes
@using Serilog
@using System.Web
@inherits LayoutComponentBase
@inject IStateController Controller

@if (Visible)
{
    <div class="program-wrapper" style="@Divstyle">
        <h3 class="title-large page-title">Programm</h3>
        
        @if (CurrentItem != null)
        {
            <h3 class="title-large overview-title">Es Läuft:</h3>
            <div class="program-item-wrapper">
                <div class="program-item">
                    <div class="program-item-title">@HttpUtility.HtmlDecode(CurrentItem.TitleDe)</div>
                    <div class="program-item-description">@HttpUtility.HtmlDecode(CurrentItem.ShortDescriptionDe)</div>
                </div>
                <div class="program-item">
                    <div class="program-item-title">
                        @CurrentItem.FormattedTimeStamp
                    </div>
                    <div class="program-item-description">
                        @CurrentItem.location_group_de
                    </div>
                </div>
            </div>
        }

        <h3 class="title-large overview-title">Anstehend:</h3>

        @foreach (var item in ProgramItems)
        {
            <div class="program-item-wrapper">
                <div class="program-item">
                    <div class="program-item-title">@HttpUtility.HtmlDecode(item.TitleDe)</div>
                    <div class="program-item-description">@HttpUtility.HtmlDecode(item.ShortDescriptionDe)</div>
                </div>
                <div class="program-item">
                    <div class="program-item-title">
                        @item.FormattedTimeStamp
                    </div>
                    <div class="program-item-description">
                        @item.location_group_de
                    </div>
                </div>
            </div>
        }
        
    </div>
}



@code {

    private ProgramItem? CurrentItem;

    private IEnumerable<ProgramItem> ProgramItems = new List<ProgramItem>();

    protected override async Task OnInitializedAsync()
    {
        await ReloadContent(Order - 1, EventArgs.Empty);
        Controller.ContentChanged += async(e, ee) => await ReloadContent(e, ee);
    }
    
    private async Task ReloadContent(object? e, EventArgs ee)
    {
        if (e is int order)
        {
            if (order == Order - 1)
            {
                Log.Debug("Triggering Reload of Program List");
                try
                {
                    var allItems = await HomepageRepository.GetProgramAsync();
                    CurrentItem = allItems.LastOrDefault(x => x.StartStamp < DateTime.UtcNow);
                    ProgramItems = allItems.Where(x => x.StartStamp > DateTime.UtcNow).OrderBy(x => x.StartStamp).Take(2);
                }
                catch
                {
                    Log.Error("Could not Fetch Program List");
                }
                
                InvokeAsync(StateHasChanged);
            }
        }
    }
    
    [Parameter]
    public int Order { get; set; }
    
    [Parameter]
    public bool Visible { get; set; }

    private string Divstyle => Visible ? "display: flex" : "display: hidden";
}