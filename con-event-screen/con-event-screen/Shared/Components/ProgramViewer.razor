@using con_event_services.Interfaces
@using con_event_api
@using con_event_api.Classes
@using Serilog
@using System.Web
@inherits LayoutComponentBase
@inject IStateController Controller
@inject IContentController Content

@if (Visible)
{
    <div class="program-wrapper" style="@Divstyle">
        <h3 class="title-large page-title">Programm</h3>
        
        @if (Content.CurrentItem != null)
        {
            <h3 class="title-large overview-title">Es Läuft:</h3>
            <div class="program-item-wrapper">
                <div class="program-item">
                    <div class="program-item-title">@HttpUtility.HtmlDecode(Content.CurrentItem.TitleDe)</div>
                    <div class="program-item-description">@HttpUtility.HtmlDecode(Content.CurrentItem.ShortDescriptionDe)</div>
                </div>
                <div class="program-item">
                    <div class="program-item-title">
                        @Content.CurrentItem.FormattedTimeStamp
                    </div>
                    <div class="program-item-description">
                        @Content.CurrentItem.location_group_de
                    </div>
                </div>
            </div>
        }

        <h3 class="title-large overview-title">Anstehend:</h3>

        @foreach (var item in Content.ProgramItems)
        {
            <div class="program-item-wrapper">
                <div class="program-item">
                    <div class="program-item-title">@HttpUtility.HtmlDecode(item.TitleDe)</div>
                    <div class="program-item-description">@HttpUtility.HtmlDecode(item.ShortDescriptionDe)</div>
                </div>
                <div class="program-item">
                    <div class="program-item-title">
                        @item.FormattedTimeStamp
                    </div>
                    <div class="program-item-description">
                        @item.location_group_de
                    </div>
                </div>
            </div>
        }
        
    </div>
}



@code {
    

    protected override async Task OnInitializedAsync()
    {
        await ReloadContent(Order - 1, EventArgs.Empty);
        Controller.ContentChanged += async(e, ee) => await ReloadContent(e, ee);
    }
    
    private async Task ReloadContent(object? e, EventArgs ee)
    {
        if (e is int order)
        {
            if (order == Order - 1)
            {
                InvokeAsync(StateHasChanged);
            }
        }
    }
    
    [Parameter]
    public int Order { get; set; }
    
    [Parameter]
    public bool Visible { get; set; }

    private string Divstyle => Visible ? "display: flex" : "display: hidden";
}