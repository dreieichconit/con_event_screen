@page "/Settings"
@using EventScreen.Services.Interfaces
@using EventScreen.Db.Models.Settings
@inject IEventConfigService EventConfigService;

<div class="d-flex flex-column gap-2">
    <h3>Select Active Config</h3>

    <MudSelect T="EventConfig" 
               @bind-Value="EventConfigService.CurrentEvent" 
               Variant="Variant.Outlined" 
               AnchorOrigin="Origin.BottomCenter" 
               Label="Select Event Config">
        @foreach (var config in EventConfigService.EventConfigs)
        {
            <MudSelectItem Value="@config">@config.EventName</MudSelectItem>
        }
    </MudSelect>

    <MudTextField 
        Label="Edit Config Name" 
        @bind-Value="EventConfigService.CurrentEvent.EventName" />
    
    <MudTextField
        T="string"
        Label="Current Theme" 
        ReadOnly="true"
        Text="@EventConfigService.CurrentEvent.EventTheme.ThemeName"/>

    <div class="d-flex flex-row gap-4">
        <MudButton @onclick="AddNew" Color="Color.Primary" Variant="Variant.Filled">Add New</MudButton>
        <MudButton @onclick="Save" Color="Color.Success" Variant="Variant.Filled">Save</MudButton>
    </div>

</div>

@code {

    protected override void OnInitialized()
    {
        base.OnInitialized();
        InvokeAsync(StateHasChanged);
    }

    private void Save()
    {
        EventConfigService.Save();
        EventConfigService.Load();
    }

    private void AddNew()
    {
        var ev = EventConfig.Create();
        
        EventConfigService.EventConfigs.Add(ev);
        EventConfigService.CurrentEvent = ev;

        InvokeAsync(StateHasChanged);
    }
}