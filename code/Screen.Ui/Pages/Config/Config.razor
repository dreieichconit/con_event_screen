@page "/Config"
@using Screen.Services.Interfaces
@using Screen.Db.Models
@using Screen.Services.Implementation
@inject IConfigurationEditService ConfigurationService;
@inject ISnackbar Snackbar;

<MudStack Justify="Justify.SpaceBetween" Class="h-100">
    <MudPaper Class="p-3">
        <h3>Configurations</h3>
    </MudPaper>
    <MudPaper Class="flex-grow-1">
        <MudDataGrid T="Configuration" Items="@ConfigurationService.Configurations" EditMode="DataGridEditMode.Cell" ReadOnly="false">
            <Columns>
                <PropertyColumn Property="x => x.Name"/>
                <PropertyColumn Property="x => x.EventName"/>
                <PropertyColumn Property="x => x.EventLogo"/>
                <PropertyColumn Property="x => x.IsActive">
                    <EditTemplate>
                        <MudCheckBox @bind-Checked="context.Item.IsActive"></MudCheckBox>
                    </EditTemplate>
                    <CellTemplate>
                        <MudText>@context.Item</MudText>
                    </CellTemplate>
                </PropertyColumn>
            </Columns>
        </MudDataGrid>
    </MudPaper>
    <MudPaper Class="p-3">
        <MudStack Row="true">
            <MudButton Variant="Variant.Outlined" Color="Color.Success" @onclick="Save">Save</MudButton>
        </MudStack>
    </MudPaper>
</MudStack>


@code {

    protected override async Task OnInitializedAsync()
    {
        ConfigurationEditService.ConfigurationsChanged += (_, _) => InvokeAsync(StateHasChanged);
        await base.OnInitializedAsync();
    }

    private void Save()
    {
        var success = ConfigurationService.Save();

        if (success)
        {
            Snackbar.Add("Saved!", Severity.Success);
            ConfigurationService.Init();
        }
        else Snackbar.Add("Error while saving.", Severity.Error);
    }

}